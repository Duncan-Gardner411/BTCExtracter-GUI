
# Script to correct any repeated error generated by the BTC extractor
# Written By Duncan Gardner, University of New Mexico,
# working under Dr.Ricardo Gonzales-Pinzon, 
# Contact me at dugardner@unm.edu or duncangardner411@gmail.com


from openpyxl import Workbook
from openpyxl.chart import (
    ScatterChart,
    Reference,
    Series
    )
import os
import sys
from openpyxl.reader.excel import load_workbook
import time
st = time.time()
#Gets FolderPath of folders containing the sheets
FormatFolderPath =""
ConvertFolderPath = ""
while FormatFolderPath == "" or ConvertFolderPath == "":
    FormatFolderPath = input("Enter the Path of folder containing non-converted, formatted sheets ")
    ConvertFolderPath = input("Enter the Path of folder containing converted sheets ")

#Generates a list containing the list of all sheets in each folder
FormattedNameList = os.listdir(FormatFolderPath)
ConvertedNameList = os.listdir(ConvertFolderPath)

#Checks if each folder contains the same number of items, generates error if no
if len(FormattedNameList) != len(ConvertedNameList):
    print("ERROR, there are an unequal number of sheets in these folders, please close the terminal ")

#Gets info on error location and fix
ErrorRow = int(input("In what row is there an error "))
ErrorStartUnit = input("What starting unit is generating an error, enter exactly as printed in original. Enter 'ANY' if it is all units ")
ErrorEndUnit = input("What ending unit is generating an error, enter exactly as printed in final. Enter 'ANY' if it is all units ")
print("Note, multiplication happens first, if you need addition first, it must be run twice")
MultiplicationFactor = float(input("What should the oringinal be multiplied by? enter 1 if none "))
AdditionFactor = float(input("What should be added to the original? enter 0 if none "))
ChangedUnit = input("If the final unit needs to be changed, what in the final unit, enter exactly in UNM format, case sensitive, enter 'NONE' if you want no unit ")

#Creates new dir in input folder
newdir1 = ConvertFolderPath + "\\Fixed"
newdir2 = FormatFolderPath + "\\Fixed"
if not os.path.exists(newdir1):
    os.makedirs(newdir1)
if not os.path.exists(newdir2):
    os.makedirs(newdir2)

#Removes the Fixed folder and a possible desktop.ini (hidden windows config file)
if "Fixed" in FormattedNameList:
    FormattedNameList.remove("Fixed")
if "Fixed" in ConvertedNameList:
    ConvertedNameList.remove("Fixed")
if "desktop.ini" in FormattedNameList:
    FormattedNameList.remove("desktop.ini")
if "desktop.ini" in ConvertedNameList:
    ConvertedNameList.remove("desktop.ini")
    
#Iterates through the list, making changes as necessary
for FormattedName in FormattedNameList:
    ConvertedName = FormattedName.replace(' NonConverted',"")
    print(ConvertedName)
    print(FormattedName)
    if ConvertedName not in ConvertedNameList or FormattedName not in FormattedNameList:
        print("Error in name change, contant me duncangardner411@gmail.com")
        quit()
    #The path created below is correct, \\ used as 2 because \ is the python escape sequence
    path = FormatFolderPath + "\\" + FormattedName
    print(path)
    FormattedWorkbook = load_workbook(path)
    FormattedSheet = FormattedWorkbook[FormattedWorkbook.sheetnames[0]]
    path = ConvertFolderPath + "\\" + ConvertedName
    ConvertedWorkbook = load_workbook(path)
    ConvertedSheet = ConvertedWorkbook[ConvertedWorkbook.sheetnames[0]]
    print("Sheet Accepted")

    #Initilizes checks as false and finds if the sheet meets criteria, converting if yes
    StartUnitState = False
    EndUnitState = False
    if ErrorStartUnit == "ANY" or FormattedSheet.cell(ErrorRow, 3).value == ErrorStartUnit:
        StartUnitState = True
        print("Start Unit Match")
    else: continue
    if ErrorEndUnit == "ANY" or ConvertedSheet.cell(ErrorRow, 3).value == ErrorEndUnit:
        print("End Unit Match")
        EndUnitState = True
    else: continue
    if StartUnitState and EndUnitState:
        print("Converting")
        ConvertedSheet.cell(ErrorRow, 4).value = (FormattedSheet.cell(ErrorRow, 4).value * MultiplicationFactor) + AdditionFactor
        if ChangedUnit != "":
            if ChangedUnit == 'NONE':
                ConvertedSheet.cell(ErrorRow, 3).value = ""
            else:
                ConvertedSheet.cell(ErrorRow, 3).value = ChangedUnit
        print("Success")

        #Saving to newly created dir
        SaveDir = newdir2 + "\\" + FormattedName
        FormattedWorkbook.save(SaveDir)
        SaveDir = newdir1 + "\\" + ConvertedName
        ConvertedWorkbook.save(SaveDir)
        print("Saved")
et = time.time()
elapsed = et - st
print('Operation took: ', elapsed, "seconds")